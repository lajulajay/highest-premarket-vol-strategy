//@version=6
indicator("High Volume Day Breakout Strategy", overlay=true, max_lines_count=20, max_labels_count=50)

// ============================================================================
// INPUT PARAMETERS
// ============================================================================
premarket_start = input.time(defval=timestamp("2025-01-01 04:00 +0000"), title="Pre-market Start Time", tooltip="Start of pre-market session")
premarket_end = input.time(defval=timestamp("2025-01-01 09:30 +0000"), title="Pre-market End Time", tooltip="End of pre-market session")
regular_start = input.time(defval=timestamp("2025-01-01 09:30 +0000"), title="Regular Hours Start", tooltip="Start of regular trading hours")

consolidation_threshold = input.float(2.0, "Consolidation Threshold %", minval=0.5, maxval=10.0, tooltip="Maximum range for consolidation as % of pre-market high")
min_consolidation_bars = input.int(10, "Min Consolidation Bars", minval=5, maxval=50, tooltip="Minimum bars for valid consolidation")
volume_spike_multiplier = input.float(2.0, "Volume Spike Multiplier", minval=1.0, maxval=5.0, tooltip="Volume must be X times average for initial move")

show_targets = input.bool(true, "Show Targets", tooltip="Display target levels")
show_patterns = input.bool(true, "Show Pattern Labels", tooltip="Show bull flag, ABCD, retest labels")
alert_on_breakout = input.bool(true, "Alert on Breakout", tooltip="Send alert when breakout occurs")

// ============================================================================
// TIME AND SESSION FUNCTIONS
// ============================================================================
is_premarket() =>
    current_time = time(timeframe.period, "0000-0000", "America/New_York")
    hour_minute = hour(current_time, "America/New_York") * 100 + minute(current_time, "America/New_York")
    hour_minute >= 400 and hour_minute < 930

is_regular_hours() =>
    current_time = time(timeframe.period, "0000-0000", "America/New_York")
    hour_minute = hour(current_time, "America/New_York") * 100 + minute(current_time, "America/New_York")
    hour_minute >= 930 and hour_minute < 1600

// ============================================================================
// VARIABLES AND STATES
// ============================================================================
var float premarket_high = na
var float premarket_low = na
var float first_breakout_price = na
var int consolidation_start_bar = na
var int consolidation_end_bar = na
var bool pattern_identified = false
var bool breakout_occurred = false
var line premarket_high_line = na
var line premarket_low_line = na
var line breakout_line = na
var line target_5pct_line = na
var line target_rr_line = na
var line target_measured_line = na

// Calculate technical indicators on every bar for consistency
avg_volume = ta.sma(volume, 20)
sma_volume_10 = ta.sma(volume, 10)
sma_close_5 = ta.sma(close, 5)
low_rising = ta.rising(low, 3)
high_falling = ta.falling(high, 3)
close_crossover_sma = ta.crossover(close, sma_close_5)
daily_change = ta.change(time("1D"))

// ============================================================================
// STEP 2: IDENTIFY PRE-MARKET PATTERN
// ============================================================================
var float session_open = na
var float session_high = na
var float session_low = na
var float initial_move_high = na
var bool strong_initial_move = false

// Track session variables
if is_premarket()
    if na(session_open)
        session_open := open
        session_high := high
        session_low := low
    else
        session_high := math.max(session_high, high)
        session_low := math.min(session_low, low)
    
    // Detect strong initial move (price up significantly with volume)
    move_pct = ((session_high - session_open) / session_open) * 100
    if move_pct > 3.0 and volume > avg_volume * volume_spike_multiplier and not strong_initial_move
        strong_initial_move := true
        initial_move_high := session_high

// Detect consolidation pattern
detect_consolidation() =>
    if strong_initial_move and is_premarket()
        current_range = session_high - session_low
        range_pct = (current_range / session_high) * 100
        
        // Check if we're in a tight consolidation
        if range_pct <= consolidation_threshold
            true
        else
            false
    else
        false

// Reset variables at start of new day
if not na(daily_change) and daily_change != 0
    session_open := na
    session_high := na
    session_low := na
    initial_move_high := na
    strong_initial_move := false
    pattern_identified := false
    breakout_occurred := false
    first_breakout_price := na

// Identify pattern completion
if detect_consolidation() and not pattern_identified and is_premarket()
    pattern_identified := true
    premarket_high := session_high
    premarket_low := session_low

// ============================================================================
// STEP 3: MARK KEY LEVELS
// ============================================================================
if pattern_identified and na(premarket_high_line)
    premarket_high_line := line.new(bar_index - 20, premarket_high, bar_index + 50, premarket_high, color=color.red, width=2, style=line.style_solid)
    premarket_low_line := line.new(bar_index - 20, premarket_low, bar_index + 50, premarket_low, color=color.green, width=2, style=line.style_solid)
    
    label.new(bar_index, premarket_high, "Pre-Market High\n" + str.tostring(premarket_high), color=color.red, style=label.style_label_down, textcolor=color.white, size=size.small)
    label.new(bar_index, premarket_low, "Pre-Market Low\n" + str.tostring(premarket_low), color=color.green, style=label.style_label_up, textcolor=color.white, size=size.small)

// ============================================================================
// STEP 5: CAPTURE BREAKOUT
// ============================================================================
if pattern_identified and is_regular_hours() and not breakout_occurred
    if close > premarket_high and high > premarket_high
        breakout_occurred := true
        first_breakout_price := premarket_high
        
        breakout_line := line.new(bar_index, first_breakout_price, bar_index + 30, first_breakout_price, color=color.blue, width=3, style=line.style_dashed)
        
        label.new(bar_index, first_breakout_price, "BREAKOUT\n" + str.tostring(first_breakout_price), color=color.blue, style=label.style_label_left, textcolor=color.white, size=size.normal)
        
        if alert_on_breakout
            alert("Breakout detected at " + str.tostring(first_breakout_price), alert.freq_once_per_bar)

// ============================================================================
// STEP 4: MARK TARGETS
// ============================================================================
if breakout_occurred and show_targets and na(target_5pct_line)
    // 5% gain target
    target_5pct = first_breakout_price * 1.05
    target_5pct_line := line.new(bar_index, target_5pct, bar_index + 50, target_5pct, color=color.yellow, width=2, style=line.style_dotted)
    label.new(bar_index + 5, target_5pct, "5% Target\n" + str.tostring(target_5pct), color=color.yellow, style=label.style_label_left, textcolor=color.black, size=size.small)
    
    // 1:3 Risk:Reward target
    risk = first_breakout_price - premarket_low
    target_rr = first_breakout_price + (risk * 3)
    target_rr_line := line.new(bar_index, target_rr, bar_index + 50, target_rr, color=color.orange, width=2, style=line.style_dotted)
    label.new(bar_index + 10, target_rr, "1:3 R:R\n" + str.tostring(target_rr), color=color.orange, style=label.style_label_left, textcolor=color.white, size=size.small)
    
    // Measured move target
    premarket_range = premarket_high - premarket_low
    target_measured = premarket_high + premarket_range
    target_measured_line := line.new(bar_index, target_measured, bar_index + 50, target_measured, color=color.purple, width=2, style=line.style_dotted)
    label.new(bar_index + 15, target_measured, "Measured Move\n" + str.tostring(target_measured), color=color.purple, style=label.style_label_left, textcolor=color.white, size=size.small)

// ============================================================================
// PATTERN RECOGNITION (Bull Flag, ABCD, Retests)
// ============================================================================
if breakout_occurred and show_patterns and is_regular_hours()
    // Retest detection
    if low <= first_breakout_price * 1.02 and low >= first_breakout_price * 0.98 and close > first_breakout_price
        label.new(bar_index, low, "RETEST", color=#00FFFF, style=label.style_label_up, textcolor=color.black, size=size.small)
    
    // Bull flag detection (simplified)
    if low_rising and high_falling and volume < sma_volume_10
        label.new(bar_index, high, "BULL FLAG", color=#00FF00, style=label.style_label_down, textcolor=color.black, size=size.small)
    
    // ABCD pattern detection (basic implementation)
    if close_crossover_sma and volume > sma_volume_10
        label.new(bar_index, low, "ABCD", color=#FF00FF, style=label.style_label_up, textcolor=color.white, size=size.small)

// ============================================================================
// VISUAL ENHANCEMENTS
// ============================================================================
// Color code candles during pre-market consolidation
bgcolor(is_premarket() and pattern_identified ? color.new(color.gray, 90) : na, title="Pre-market Consolidation")

// Highlight breakout candle
bgcolor(breakout_occurred and is_regular_hours() and not breakout_occurred[1] ? color.new(color.gray, 80) : na, title="Breakout Candle")

// ============================================================================
// TABLE DISPLAY
// ============================================================================
if barstate.islast and pattern_identified
    var table info_table = table.new(position.top_right, 2, 6, bgcolor=color.white, border_width=1)
    
    table.cell(info_table, 0, 0, "Pre-Market High", text_color=color.black, bgcolor=color.red)
    table.cell(info_table, 1, 0, str.tostring(premarket_high), text_color=color.white, bgcolor=color.red)
    
    table.cell(info_table, 0, 1, "Pre-Market Low", text_color=color.black, bgcolor=color.green)
    table.cell(info_table, 1, 1, str.tostring(premarket_low), text_color=color.white, bgcolor=color.green)
    
    if breakout_occurred
        table.cell(info_table, 0, 2, "Breakout Price", text_color=color.white, bgcolor=color.blue)
        table.cell(info_table, 1, 2, str.tostring(first_breakout_price), text_color=color.white, bgcolor=color.blue)
        
        table.cell(info_table, 0, 3, "5% Target", text_color=color.black, bgcolor=color.yellow)
        table.cell(info_table, 1, 3, str.tostring(first_breakout_price * 1.05), text_color=color.black, bgcolor=color.yellow)
        
        risk = first_breakout_price - premarket_low
        table.cell(info_table, 0, 4, "1:3 R:R Target", text_color=color.white, bgcolor=color.orange)
        table.cell(info_table, 1, 4, str.tostring(first_breakout_price + (risk * 3)), text_color=color.white, bgcolor=color.orange)
        
        premarket_range = premarket_high - premarket_low
        table.cell(info_table, 0, 5, "Measured Move", text_color=color.white, bgcolor=color.purple)
        table.cell(info_table, 1, 5, str.tostring(premarket_high + premarket_range), text_color=color.white, bgcolor=color.purple)

// ============================================================================
// ALERTS
// ============================================================================
alertcondition(pattern_identified and not pattern_identified[1], "Pattern Identified", "Pre-market consolidation pattern detected")
alertcondition(breakout_occurred and not breakout_occurred[1], "Breakout Alert", "Price broke above pre-market high")

// Plot invisible series for alerts
plot(pattern_identified ? 1 : 0, "Pattern Signal", display=display.none)
plot(breakout_occurred ? 1 : 0, "Breakout Signal", display=display.none)